
Class Quality

Abstract Data Types
- Have you thought of the class in your program as abstract data types
    and evaluated their interfaces from that point of view?

Abstraction
- Does the class have a central purpose?
- Is the class well named, and does its name describe its central
    purpose?
- Does the class's interface present a consistent abstraction?
- Does the class's interface make obvious how you should use the class?
- Is the class's interface abstract enough that you dont have to think
    about how its services are implemented? Can you treat the class as
    a black box?
- Are the classs services complete enough that other classes dont have 
    to meddle with its internal data?
- Has unrelated information been moved out of the class?
- Have you thought about subdividing the class into component classes,
    and have you subdivided it as much as you can?
- Are you preserving the integrity of the classs interface as you 
    modify the class?

Encapsulation
- Does the class minimize accessibility to its members?
- Does the class avoid exposing member data?
- Does the class hide its implementation detaisl from other classes as
    much as the programming language permits?
- Does the class avoid making assumptions about its users, including
    its derived classes?
- Is the class independent of other classes? Is it loosely coupled?

Inheritance
- Is inheritance only used to model "is a" relationships - that is, do
    derived classes adhere to the substitution principle?
- Does the class documentation describe the inheritance strategy?
- Do derived classes avoid "overriding" non-overridable routines?
- Are common interfaces, data and behavior as high as possible in the
    inheritence tree?
- Are inheritance trees fairly shallow?
- Are all data members in the base class private rather than protected?

Other Implementation Issues
- Does the class contain about seven data members or fewer?
- Does the class minimize direct and indirect routine calls to other
    classes?
- Does the class collaborate with other classes only to the extent 
    absolutely necessary?
- Is all member data initialized in the constructor?
- Is the class designed to be used as deep copies rather than shallow
    copies unless theres a measured reason to create shallow copies?

Language Specific Issues
- Have you investigated the language specific issues for classes in your
    specific programming language?

------------------------------------------------------------------------
Key Points

- Class interfaces should provide a consistent abstraction. Many 
    problems arise from violating this single principle.
- A class interface should hide something - a system interface, a design
    decision, or an implementation detail.
- Containment is usually preferable to inheritance unless youre modeling
    an "is a" relationship
- Inheritance is a useful tool, but it adds complexity, which is counter
    to Softwares Primary Technical Imperative of managing complexity
- Classes are your primary tool for managing complexity. Give their
    design as much attention as needed to accomplish that objective
