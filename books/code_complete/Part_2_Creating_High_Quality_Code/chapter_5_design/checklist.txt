
Design in Construction

Design Practices
- Have you iterated, selecting the best of several attempts rather than
    the first attempt?
- Have you tried decomposing the system in several different ways to
    see which will work best?
- Have you approached the design problem from both the top down and from
    the bottom up?
- Have you protofyped risky or unfamilliar parts of the system, creating
    the absolute minimum amount of throwaway code needed to answer
    specific questions?
- Has your design been reviewed, formally or informally, by others?
- Have you driven the design to the point that its implementation seems
    obvious?
- Have you captured your design work using an appropriate technique
    such as a Wiki, e-mail, flip charts, digital photography, UML, CRC
        cards, or comments in the code itself?

Design Goals
- Does the design adequately address issues that weere identified and
    deferred at the architectural level?
- Is the design stratified into layers?
- Are you satisified with the way the program has been decomposed into
    subsystems, packages and classes?
- Are you satisfied with the way the classes have been decomposed into
    routines?
- Are classes designed for minimal interaction with each other?
- Are classes and subsystesm designed so that you can use them in other
    systems?
- Will the program be easy to maintain?
- Is the design lean? Are all of its parts strictly necessary?
- Does the design use standard techniques and avoid exotic, hard-to-
    understand elements?
- Overall, does the design help minimize both accidential and essential
    complexity?

------------------------------------------------------------------------
Key Points

- Softwares Primary Technical Imperative is MANAGING COMPLEXITY. This is
    greatly aided by a design focus on simplicity
- Simplicity is achieved in two general ways: minimizing the amount of
    essential complexity that anyones brain has to deal with at any one
    time, and keeping accidential complexity from proliferating
    needlessly.
- Design is heuristic. Dogmatic adherence to any single methodology
    hurts creativity and hurts your programs
- Good design is iterative; the more design possibilities you try, the
    better your final design will be
- Information hiding is a particularly valuable concept. Asking "What
    should I hide?" settles many difficult design issues.
- Lots of useful, interesting information on design is available outside
    this book

