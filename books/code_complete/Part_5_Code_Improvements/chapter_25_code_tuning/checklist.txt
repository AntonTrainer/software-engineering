Summary of the Approach to Code Tuning

1) Develop the software by using well-designed code thats easy to
    understand and modify
2) If performance is poor:
    1) Save a working version of the code so you can get back to last
        known good state
    2) Measure the system to find hot spots
    3) Determine whether the weak performance comes from inadequate 
        design, data types, or algorithms and whether code tuning is
        appropriate. If code tuning isnt appropriate, go back to step 1
    4) Tune the bottleneck
    5) Measure each improvement one at a time
    6) If an improvement doesnt improve code, revert to the orignal code
3) Repeat

------------------------------------------------------------------------
Code Tuning Strategies

Overall Program Performance
- Have you considered improving performance by changing the program
    requirements?
- Have you considered improving performance by modifying the programs
    design?
- Have you considered improving performance by modifying the class
    design?
- Have you considered improving performance by avoiding operating 
    system interactions?
- Have you considered improving performance by avoiding I/O?
- Have you considered improving performance by using a compiled
    language instead of an interpreted one?
- Have you considered improving performance by using compiler 
    optimizations?
- Have you considered improving performance by switching to different
    hardware?
- Have you considered code tuning only as a last resort?

Code Tuning Approach
- Is your program fully correct before you begin to code?
- Have you measured performance bottlenecks before beginning code tuning
- Have you measured the effect of each code tuning change?
- Have you backed out of the code tuning change that didnt produce the
    intended improvement?
- Have you tried more than one change to improve performance of each
    bottleneck - that is, iterated?

------------------------------------------------------------------------
Key Points

- Performance is only one aspect of overall software quality, and its 
    usually not the most important. Finely tuned code is only one aspect
    of overall performance, and ise usually not the most significant.
    Program architecture, detailed design, and data-structure and 
    algorithm selection usually have more influence on a programs 
    execution speed and size than the efficiency of its code does
- Quantitiative measurement is a key to maximizing performance. Its
    needed to find the areas in which performance improvements will 
    really count, and its needed again tov erify that optimizations
    improce rather than degrade the software
- Most programs spend most of their time in a small fraction of their 
    code. You wont know which code that is until you measure it
- Multiple iterations are usually needed to achieve desired performance
    through code tuning
- The best way to prepare for performance work during initial coding is
    to write clean code thats easy to understand and modify


