Code Tuning Techniques

Improve Both Speed and Size
- Replace complicated logic with table lookups
- Jam loops
- Use ints instead of floats
- Initialize data at compile time
- Use constants of correct type
- Precompute results
- Eliminate common subexpressions
- Translate key routines to low level language

Improve Speed Only
- Stop testing when you knwo the answer
- Order test cases (if/else trees) by frequency
- Compare performance of similar logic structures
- Use lazy evaluation
- Unswitch loops that contain if tests
- Unroll loops (maybe not, not great for python)
- Use sentinels in search loops (like predef True or Falses)
- Put busiest loop on the inside of nested loops
- Reduce strength of operations performed inside loops
- Change multi-dimension arrays to arrays with a single dimension
- Minimize array references
- Augment data types with indexes
- Cache frequently used values
- Exploit algebraic identities
- Reduce strength in logical and mathematical expressions
- Be wary of system routines
- Rewrite routines inline

------------------------------------------------------------------------
Key Points

- Results of optimizations vary widely with different languages,
    compilers, end environments. Without measuring each specific 
    optimization, youll have no idea whether it will help or hurt your
    program.
- The first optimization is often not the best. Even after you find a
    good one, keep looking for one thats better
- Code tuning is a little like nuclear energy. Its a controversial, 
    emotional topic. Some people think its so detrimental to 
    reliability and maintainability that they wont do it at all. Others
    think that with proper safeguards, its beneficial. If you decide to
    use the techniques decribed in this chapter, apply them with care.

