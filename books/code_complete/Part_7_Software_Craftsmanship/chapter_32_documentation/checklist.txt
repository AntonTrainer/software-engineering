Self-Documenting Code

Classes
- Does the class's interface present a consistent abstraction?
- Is the class well named, and does its name describe its central
    purpose?
- Does the class's interface make obvious how you should use the class?
- Is the class's interface abstract enough that you dont have to think
    about how its services are implemented? Can you treat the class as
    a black box?

Routines
- Does each routines name describe exactly what the routine does?
- Does each routine perform one well defined task?
- Have all perts of each routine that would benefit from being put into
    their own routines been put into their own routines?
- Is each routines interface obvious and clear?

Data Names
- Are type names descriptive enough to help document data declarations?
- Are variables named well?
- Are variables used only for the purpose for which theyre named?
- Are loop counters given more informative names than i, j, k?
- Are well named enumerated types used instead of makeshift flags or
    boolean varaibles?
- Are named constants used instead of magic numbers or magic strings?
- Do naming conventions distinguish among type names, enumerated types,
    named constants, local variables, class variables, and global vars?

Data Organization
- Are extra variables used for clarity when needed?
- Are references to variables close together?
- Are data types simple so that they can minimize complexity?
- Is complicated data accessed through abstracted access routines? ADT

Control
- Is the nominal path through the code clear?
- Are related statements grouped together?
- Have relatively independent groups of statements been packaged into 
    their own routined?
- Does the normal case follow the if, rather than the else?
- Are control structure simple so that they minimize complexity?
- Does each loop perform one and only one function, as a well defined
    routine would?
- Is nesting minimized?
- Have boolean expressions been simplified by using additional boolean
    variables, boolean functions, and decision tables?

Layout
- Does the programs layout show its logical structure?

Design
- Is the code straightforward, and does it avoid cleverness?
- Are implementation details hidden as much as possible?
- Is the program written in terms of the problem domain as much as
    possible, rather than in terms of computer-science or 
    programming language structures?

------------------------------------------------------------------------
Good Commenting Technique

General
- Can someone pick up the code and immediately start to understand it?
- Do comments explain the codes intent or summarize what the code does, 
    rather than just repeating the code?
- Is the Pseudocode Programming Process used to reduce commenting time?
- Has tricky code been written rather than commented?
- Are comments up to date?
- Are comments clear and correct?
- Does the commenting style allow comments to be easily modified?

Statements and Paragraphs
- Does the code avoid endline comments?
- Do comments focus on why rather than how?
- Do comments prepare the reader for the code to follow?
- Does every comment count? Have redundant, extraneous, and 
    self-indulgent comments been removed or improved?
- Are surprises documented?
- Have abbreviations been avoided?
- Is the distinction between major and minor comments clear?
- Is the code that works around an error or undocumented feature
    commented?

Data Declarations
- Are units on data declarations commented?
- Are the ranges of values on numeric data commented?
- Are coded meanings commented?
- Are limitations on input data commented?
- Are flags documented to the bit level?
- Has each global variable been commented where it is declared?
- Has each global variable been identified as such at each usage, by a
    naming convention, comment or both?
- Are magic numbers replaced with named constants or variables rather
    than just documented?

Control Structures
- Is each control statement commented?
- Are the ends of long or complex control structures commented or, when
    possible, simplified so that they dont need comments?

Routines
- Is the purpose of each routine commented?
- Are other facts about each routine given in comments, when relevant, 
    including input and output data, interface assumptions, limitations,
    error corrections, global effects, and sources of algorithms?

Files, Classes, and Programs
- Does the program have a short document, such as that described in the
    Book Paradigm, that gives an overall view of how the program is 
    organized?
- Is the purpose of each file described?
- Are the authors name, email address, and phone number in the listing?

------------------------------------------------------------------------
Key Points

- The question of whether to comment is a legitimate one. Done poorly,
    commenting is a waste of time and sometimes harmful. Done well, 
    commenting is worthwhile
- The source code should contain most of the critical information about
    the program. As long as the program is running, the source code is
    more likely than any other resource to be kept current, and its 
    useful to have the important information bundled with the code
- Good code is its own best documentation. If the code is bad enough
    to require extensive comments, try first to improve the code so that
    it doesn need extensive comments
- Comments should say something about the code that the code cant say
    about itself - at the summary level or the intent level
- Some commenting styles require a lot of tedious clerical work. 
    Develop a style thats easy to maintain

