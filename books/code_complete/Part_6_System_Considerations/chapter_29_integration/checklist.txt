Integration

Integration Strategy
- Does the strategy identify th eoptimal order in which subsystems, 
    classes, and routines should be integrated?
- Is the integration order coordinated with the construction order so
    that classes will be ready for integration at the right time?
- Does the strategy lead to easy diagnosis of defects?
- Does the strategy keep scaffolding to a minimuim?
- Is the strategy better than other approaches?
- Have the interfaces between components been specified well? 
    (Specifiying interfaces isnt an integration task, but verifying that
    they have been specified well is)

Daily Build and Smoke Test
- Is the project building frequently - ideally, daily - to support 
    incremental integrations?
- Is a smoke test run with each build so that you know whether the build
    works?
- Have you automated the build and smoke test?
- Do developers check in their code frequently - going no more than a
    day or two between check ins?
- Is the smoke test kept up to date with the code, expanding as the code
    expands?
- Is a broken build a rare occurence?
- Do you build and smoke test software even when youre under pressure?

------------------------------------------------------------------------
Key Points

- The construction sequence and integration approach affect th eorder in
    which classes are designed, coded and tested
- A well thought out integration order reduces testing effort and eases
    debugging
- Incremental integration comes in several varieties, and, unless the
    project is trivial, any one of them is better than phased 
    integration
- The best integration approach for any specific project is usually a
    combination of top down, bottom up, risk oriented, and other
    integration approaches. Tshaped integration and vertical slice 
    integration are two approaches that often work well
- Daily builds can reduce integration problems, imrpove developer
    morale, and provide useful project management information
