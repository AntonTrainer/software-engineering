Fundamental Data

Numbers in General
- Does the code avoid magic numbers?
- Does the code anticipate divide-by-zero errors?
- Are type conversions obvious?
- If variables with two different types are used in the same expression,
    will the expression be evaluated as you intend it to be?
- Does the code avoid mixed type comparisons?
- does the program compile with no warnings?

Integers
- Do expressions that use integer division work the way theyre meant to?
- Do integer expressions avoid integer-overflow problems?

Floating-Point Numbers
- Does the code avoid additions and subtractions on numbers with greatly
    differnt magnitudes?
- Does the code systematicall prevent rounding errors?
- Does the code avoid comparing floating point numbers for equality

Characters and Strings
- Does the code avoid magic characters and strings?
- Are references to strings of off-by-one errors?

Boolean Variables
- Does the progrma use additional boolean variables to document
    conditional tests?
- Does the rpogram use additional boolean variables to simplify 
    conditional tests?

Named Constants
- Does the program use named constants for data declarations and loop
    limits rather than magic numbers?
- Have named constants been used consistently - not used as named
    constants in some places and as literals in others?

Arrays
- Are all array indexes within the bounds of the array?
- Are all array references free of off-by-one errors?
- Are all subscripts on multidimensional arrays in the correct order?
- In nested loops, is the correct variable used as the array subscript,
    avoiding loop-index cross-talk?

Creating Types
- Does the program sue a different type for each kind of data that might
    change?
- Are the type names oriented toward the real world entities the data 
    types represent rather than towards programming language tpyes?
- Are the type names descriptive enough to help document data 
    declarations?
- Have you avoided redefining predefined types?
- Have you cinsidered creating a new class rather than simply redefining
    a type?

------------------------------------------------------------------------
Key Points

- Working with specific data types means remembering many individual 
    rules for each type. Use this chapters checklist fo make sure that
    youve considered the common problems
- Creating your own types makes your programs easier to modify and more
    self documenting, if your language supports that capability
- When you create a simple type using typedef or its equivalent, 
    consider whether you should be creating a new class instead

