Control-Structure Issues

- Do expressions use true and false rather than 1 and 0?
- Are boolean values compared to true and false implicityly?
- Are numeric values compared to their test values explicitly?
- Have expressions been simplicied by the addition of new boolean
    variables and the use of boolean functions and decision tables?
- Are boolean expressions states positively?
- Do pairs of braces balance? (means of marking out sequence)
- Are braces used everywhere theyre needed for clarity (marking seq)
- Are logical expressions fully parenthesized?
- Have tests been written in number-line order?
- Are NULL statements obvious?
- Have nested statements been simplified by re-testing part of the
    conditional, converting to if-then-else or case statements, moving
    nested code into its own subroutine, converting to a more object 
    oriented design, or have they been improved in some other way?
- If a routine has a decision count of more than 10, is there a good
    reason for not redesigning it?

------------------------------------------------------------------------
Key Points

- Making boolean expressios simple and readable contributes 
    substantially to the quality of your code
- Deep nesting makes a routine hard to understand. Fortunately, you can
    avoid it relatively easy
- Structured programming is a simple idea that is still relevant:
    you can build any program out of a combination of sequences, 
    selections, and iterations
- Minimizing compexity is a key to writing high quality code
