
High-Quality Routines

Big Picture Issues
- Is the reason for creating the routine sufficient?
- Have all parts of the routine that would benefit from being put into
    routines of ther own been put into routines of their own?
- Is the routines name a strong, clear verb-plus-object name for a 
    procedure or a description of the return value for a function?
- Does the routines name describe everything the routine does?
- Have you established naming conventions for common operations?
- Does the routine have strong, functional cohesion - doing one and
    only one thing and doing it well?
- Do the routines have loose coupling - are the routines connections to
    other routines small, intimate, visible and flexible?
- Is the length of the routine determined naturally by its function and
    logic, rather than by an artificial coding standard?

Parameter-Passing Issues
- Does the routines parameter list, taken as a whole, present a
    consistent interface abstraction?
- Are the routines parameters in a sensible order, including matching
    the order of parameters in similar routines?
- Are interface assumptions documented?
- Does the routine have seven or fewer parameters?
- Is each input parameter used?
- Is each output parameter used?
- Does the routine avoid using input parameters as working variables?
- If the routine is a function, does it return a valid value under all
    possible circumstances?

------------------------------------------------------------------------
Key Points

- The most important reason for creating a routine is to improve the
    intellectual manageability of a program, and you can create a
    routine for many other good reasons. Saving space is a minor reason;
    improved readability, reliability and modifiability are better
    reasons.
- Sometimes the operation that most benefits from being put into a 
    routine of its own is a simple one
- You can classify routines into various kinds of cohesion, but you can
    make most routines functionally cohesive, which is best
- The name of a routine is an indication of its quality. If the name is
    bad and its accurate, the routine might be poorly designed. If the 
    name is bad and its inaccurate, its not telling you what the program
    does. Either way, a bad name means that the program needs to be
    changed.
- Functions should be used only when the primary purpose of the function
    is to return the specific value described by the functions name

