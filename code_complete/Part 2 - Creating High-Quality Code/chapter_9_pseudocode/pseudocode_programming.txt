
Pseudocode Programming Process (PPP)

Summary of Steps in Building Classes and Routines
- Iterative process
- General design
- Enumerate specific routines
- Construct specific routines
- Check class construction as a whole

Steps in Creating a Class
Key Steps:
- Create general design for the class
    - Design specific responsibilities
    - Define "secrets"
    - Determine if to derived from another class
        - Or if another class will be derived from it
    - Identify key public methods
    - Iterate through all these steps
- Construct each routine within the class
    - After determining major routines on the first step, create them
    - This usually unearths more routines that need to be made
- Review and test the class as a whole
    - Test each routine
    - Test whole class as a stand alone unit

Steps in Building a Routine
- Desigining routine
- Checking design
- Coding the routine
- Checking the code

------------------------------------------------------------------------
Pseudocode for Pros
Guidelines for ussing effectively
- Use english like statements that precisely describe specific 
    operations
- Avoid syntactic elements from the target language
    - Youre writing pseudocode to avoid syntactic elements lmao
- Write pseudocode at the level of intent
    - Describe meaning of approach, not how it will be implemented
- Write pseudocode at a low enough level that generating code from it
    will be nearly atomic
    - if pseudocode is at too high of a level, it can gloss over
    problematic details in the code

Once the pseudocode is written, you build the code around it and the
original pseudocode becomes the comments

Benefits
- Pseudocode makes reviews easier
    - design details can be reviewed without slogging through code
- Pseudocode supports idea of iterative refinement
    - At high level design, can catch high level errors
    - At mid level pseudocode, can catch logic errors
    - At low level programming, can catch programming errors
    - No overlap so easy to focus
- Pseudocode makes changes easier
    - A few lines of pseudocode is easier to change than a page of code
    - Erasing a line on a blueprint instead of tearing down an entire 
    wall
- Pseudocode minimizes commenting effort
- Pseudocode is easier to maintain than other forms of design
    documentation

------------------------------------------------------------------------
Constructing Routines by Using the PPP
1) Design the routine
2) Code the routine
3) Check the code
4) Clean up loose ends
5) Repeat as needed

Design the Routine:
Preliminary --> 
- First, check the reqs, and make sure the routine is useful and defined
- Define the problem the routine will solve
    - The information the routine will hide
    - The Inputs to the routine
    - Outputs from the routine
    - Preconditions that are guaranteed to be true before routine called
    - Postconditions the routine guarantees before passing control back
    to the caller
- Name the routine
- Decide how to test the routine
- Research functionality available in the standard library
    - Single biggest way to imrpove code and productivity is to reuse
    good code
- Think about error handling
- Think about efficiency
    - If efficiency isnt critical, make sure routines interface is well
    abstracted and the code is readable
    - If efficiency is critical, design routine so resource and speed
    goals can be met
    --> Its usually a waste of time to work on efficiency at the level
        of individual routines. Big optimization comes from high level
        design, not the individual routines
- Research algorithms and data types
    - Before writing complicated code from scratch, dont, look it up
- Write pseudocode

High Level Pseudocode -->
- Start with the general and work towards something more specific
    - Most general is the header comment of a routine describing it
        - Trouble writing the statement is a warning that you need to
        understand the routines role in the program better
        - If its hard to summarize, assume something is wrong
- Think about the data
    - Good to think about the major pieces of data before logic
- Check pseudocode
    - Take a step back and just think about it
- Ask someone else to look at it or have you explain it to them
    - People are more willing to review a few lines of pseudocode than
    35 lines of C yknow
- Make sure you have an easy and comfortable understanding of routine
- Try a few ideas in pseudocode
    - Iterate and keep best

------------------------------------------------------------------------
Code the Routine
1) Write routine declaration
2) Write the first and last statements
    - Also note all assumptions about the interface, in and out
3) Turn pseudocode into high level comments
4) Fill in code below each comment
5) Check the code
    - Sometimes code below each comment line will explode
        Option 1: Factor code into a new routine
        Option 2: Apply PPP recursively
6) Clean up leftovers


Really Checking the Code
- Problems may not appear until routine is fully coded
- Mentally check routine for errors
    - Mentally executing a routine is difficult, so keep routines small
- A working routine isnt enough. If you dont know why it works, study it
- Compile/run for sure lmao
    - You should fully expect it to work in entirety instead of 
    incrementally hacking together lines and testing ever 4s
- The point is to rise above the cycle of hacking something together
    and running it to see if it works
    - Compiling before youre sure your program works is often a symptom
    of the hacker mindset

Clean up Leftowvers
- Check routines interface
    - Make sure all IO data is acctounted for and parameters are used
- Check for general design quality
    - Make sure routine does one thing and does it well
    - Loosely coupled
- Check the routines variables
    - Inaccurate variable names, unused objects, etc
- Check routines statements and logic
- Check routines layout
    - Make usre youve used white space to clarify logical structure, 
    expressions and parameter list
- Check routines documentation
    - Make sure pseudocode translated into comments is still accurate
    - Check for algorithm descriptions
    - Documentation on interface assumptions
    - Non obvious dependencies
    - Justification of unclear coding practices
- Remove redundant comments

Repeat all as needed haha

------------------------------------------------------------------------
Alternatives to PPP
- Test-first developemnt
- Refactoring
- Design by contract
    - Each routine has specifc pre and post conditions

