General Considerations In Using Data

Initializing Variables
- Does each routine check input parameters for validity?
- Does code declare variables close to where theyre first used?
- Does code initialize variables as theyre declared, if possible?
- Does the code initialize bariables close to where theyre first used, 
    if it isnt possible to declare and initialize them at the same time?
- Are counters and accumulators initialized properly and, if necessary, 
    reinitialized each time they are used?
- Are variables reinitialized properly in code thats executed repeatedly
- Does the compile with no warnings from the compiler?
- If languages uses implicit declarations, have you compensated for the
    problems they cause?

Other General Issues in Using Data
- Do all variables have the smallest scope possible?
- Are references to variabbles as close together as possible, both from
    each reference to a variable to the next reference and in total
    live time?
- Do control structures correspond to the data types?
- Are all the declared variables used?
- Are all variables bound at appropriate times - that is, are you 
    striking a conscious balance between the flexibility of late binding
    and the increased complexity associated with late binding?
- Does each variable have one and only one purpose?
- Is each variables meaning explicit, with no hidding meanings?

------------------------------------------------------------------------
Key Points

- Data initialization is prone to errors, so use initialization 
    techniques described in the chapter to avoid the problems caused
    by unexpected initial values
- Minimize the scope of each variable. Keep references to a variable
    close together. Keep it local to a routine or class.
    Avoid global data
- Keep statements that work with the same variables as close together
    as possible
- Early binding tends to limit flexibility but minimize complexity. 
    Late binding tends to increase flexibility but at the price of 
    increased complexity.
- Use each variable for one and only on purpose.

